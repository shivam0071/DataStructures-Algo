Knowing the OO basics does not make you a good OO designer.
Good OO designs are reusable, extensible and maintainable.
Patterns show you how to build systems with good OO design qualities. 
Patterns are proven objectoriented experience.
Patterns don’t give you code, they give you general solutions to design problems. You apply them to your specific application.

################## STRATEGY PATTERN ################## 

1.) Design Principle
        Identify the aspects of your
        application that vary and separate
        them from what stays the same.
    

        The result? Fewer
        unintended consequences
        from code changes and more
        flexibility in your systems!

        take the parts that vary and encapsulate them, so that later you can
        alter or extend the parts that vary without affecting
        those that don’t.

        As simple as this concept is, it forms the basis for almost every
        design pattern. All patterns provide a way to let some part of a system
        vary independently of all other parts.



2.) Design Principle
        Program to an interface, not an implementation.
        "Program to an interface" really means "Program to a supertype." ?

        An Interface here means some set of rules that everyone should implement, It can be an abstract class or an Interface(defining rules)

        For example
        BaseClass  obj = new SubClass()

        Now we know that every base class has what methods and variables and we code to 
        this implementation rather than adding some new logic in concreate classes ?s


3.) Design Principle
        Favor composition over inheritance (Composition is HAS A relation OR using another class objs in One class)


The Strategy Pattern defines a family of algorithms(BEHAVIOURS), encapsulates each one, 
and makes them interchangeable. 
Strategy lets the algorithm vary independently from clients that use it.


################## The OBSERVER PATTERN ################## 
You know how newspaper or magazine subscriptions work:
        1.) A newspaper publisher goes into business and begins publishing newspapers.
        2.) You subscribe to a particular publisher, and every time there’s a new edition it gets delivered to you. As long as
            you remain a subscriber, you get new newspapers.
        3.) You unsubscribe when you don’t want papers anymore, and they stop being delivered.
        4.) While the publisher remains in business, people, hotels,airlines and other businesses constantly subscribe and
            unsubscribe to the newspaper.


        Publishers + Subscribers = Obs e r v e r Pa t t e r n

        If you under stand newspaper subscriptions, you pretty much understand the Obser ver Patter n, only we call the publisher
        the SUBJECT and the subscribers the OBSERVERS.


        Definition
        The Observer Pattern defines a one-to-many
        dependency between objects so that when one
        object changes state, all of its dependents are
        notified and updated automatically.


        LOOSELY COUPLED
        When two objects are loosely coupled, they can interact, but have very little knowledge of each other.
        The Observer Pattern provides an object design where subjects and observers are loosely coupled


        4.) Design Principle
        Strive for loosely coupled designs
        between objects that interact.


################## The DECORATOR PATTERN ################## 