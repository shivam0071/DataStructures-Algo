Knowing the OO basics does not make you a good OO designer.
Good OO designs are reusable, extensible and maintainable.
Patterns show you how to build systems with good OO design qualities. 
Patterns are proven object oriented experience.
Patterns don’t give you code, they give you general solutions to design problems. You apply them to your specific application.

################## STRATEGY PATTERN ################## 

1.) Design Principle
        Identify the aspects of your
        application that vary and separate
        them from what stays the same.
    

        The result? Fewer
        unintended consequences
        from code changes and more
        flexibility in your systems!

        take the parts that vary and encapsulate them, so that later you can
        alter or extend the parts that vary without affecting
        those that don’t.

        As simple as this concept is, it forms the basis for almost every
        design pattern. All patterns provide a way to let some part of a system
        vary independently of all other parts.



2.) Design Principle
        Program to an interface, not an implementation.
        "Program to an interface" really means "Program to a supertype." ?

        An Interface here means some set of rules that everyone should implement, It can be an abstract class or an Interface(defining rules)

        For example
        BaseClass  obj = new SubClass()

        Now we know that every base class has what methods and variables and we code to 
        this implementation rather than adding some new logic in concreate classes ?s


3.) Design Principle
        Favor composition over inheritance (Composition is HAS A relation OR using another class objs in One class)


The Strategy Pattern defines a family of algorithms(BEHAVIOURS), encapsulates each one, 
and makes them interchangeable. 
Strategy lets the algorithm vary independently from clients that use it.


################## The OBSERVER PATTERN ################## 
You know how newspaper or magazine subscriptions work:
        1.) A newspaper publisher goes into business and begins publishing newspapers.
        2.) You subscribe to a particular publisher, and every time there’s a new edition it gets delivered to you. As long as
            you remain a subscriber, you get new newspapers.
        3.) You unsubscribe when you don’t want papers anymore, and they stop being delivered.
        4.) While the publisher remains in business, people, hotels,airlines and other businesses constantly subscribe and
            unsubscribe to the newspaper.


        Publishers + Subscribers = Obs e r v e r  P a t t e r n

        If you under stand newspaper subscriptions, you pretty much understand the Observer Pattern, only we call the publisher
        the SUBJECT and the subscribers the OBSERVERS.


        Definition
        The Observer Pattern defines a one-to-many
        dependency between objects so that when one
        object changes state, all of its dependents are
        notified and updated automatically.


        LOOSELY COUPLED
        When two objects are loosely coupled, they can interact, but have very little knowledge of each other.
        The Observer Pattern provides an object design where subjects and observers are loosely coupled


        4.) Design Principle
        Strive for loosely coupled designs
        between objects that interact.


################## The DECORATOR PATTERN ################## 

        Design Principle
                Classes should be open for extension, but closed for modification.

        Our goal is to allow classes to be easily extended to
        incorporate new behavior without modifying existing code.
        What do we get if we accomplish this? Designs that are
        resilient to change and fl exible enough to take on new
        functionality to meet changing requirements.


        While it may seem like a contradiction,
        there are techniques for allowing code to be
        extended without direct modification.

        Be careful when choosing the areas of code
        that need to be extended; applying the
        Open-Closed Principle EVERYWHERE
        is wasteful, unnecessary, and can lead to
        complex, hard to understand code.

        
        Definition:
        The Decorator Pattern attaches additional
        responsibilities to an object dynamically.
        Decorators provide a flexible alternative to
        subclassing for extending functionality.


        So they are basically like the decorators that we have in Python 
        it adds to the functionality of the base class or a function

        for example -- a gun class with suppressor/compensator decorators for changing damage and sound
        
        This pattern is generally used with Factory Pattern and Builder Pattern 
        as object creation is nested and prone to bugs and kinda complex



################## The Factory PATTERN ################## 

        A factory method handles object creation and encapsulates it in
        a subclass. This decouples the client code in the superclass from
        the object creation code in the subclass.

        A factory method is
        abstract so the subclasses
        are counted on to handle
        object creation.

        A factory method may be
        parameterized (or not)
        to select among several
        variations of a product.

        A factory method isolates the client (the
        code in the superclass, like orderPizza())
        from knowing what kind of concrete
        Product is actually created.

        A factory method returns
        a Product that is typically
        used within methods defined
        in the superclass.


        Definition
        The Factory Method Pattern defines an interface
        for creating an object, but lets subclasses decide which
        class to instantiate. Factory Method lets a class defer
        instantiation to subclasses.

  
        reducing dependencies to concrete classes in our code is a “good thing.”

        Design Principle - The Dependency Inversion Principle
        Depend upon abstractions. Do not depend upon concrete classes.
        
        our high-level components should not depend on our low-level 
        components; rather, they should both depend on abstractions

        A “high-level” component is a class
        with behavior defined in terms of
        other, “low level” components.
        For example, PizzaStore is a
        high-level component because
        its behavior is defined in terms
        of pizzas - it creates all the
        different pizza objects, prepares,
        bakes, cuts, and boxes them, while
        the pizzas it uses are low-level
        components.



        The following guidelines can help you avoid OO designs that violate
        the Dependency Inversion Principle:
                1 No variable should hold a reference to a concrete class.
                2 No class should derive from a concrete class.
                3 No method should override an implemented method of any of its base classes.