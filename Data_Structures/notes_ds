

TRICKS -

1.) FIND MIDPOINT USING - Mainly used for Binary Search
mid = start + (end-start) // 2   --> if start is somewhere in the middle then we take account of the elements before the start point

2.) RIGHT INDEX - LEFT INDEX
this gives the total item between to index exluding the Left Index
    [1, 1, 1, "2", 3, "4", 5, 6, 1, 1]
    5 - 3 = 2 meaning 2 items within these 2 index that is element 3 and 4 (not 2)

3.) BINARY SEARCH
Whenever you see any question that ned to be done in O(log n) than that question is a variation of Binary Search

4.) MIN MAX functions are really handy

5.) When you want to append something to  the left side of the list, use a deque
collections.deque() and use its appendleft() method

6.) COLLECTIONS.COUNTER
a = collections.Counter("cool")
a = {"c":1,"o":2,"l":1}
If you are using counter sometimes you might need to create a list using the about dictionary, in an expanded form for that
use:
list(a.elements())
[c,o,o,l]

7.) LEAP DAYS
return 1 if year % 4 == 0 and year % 100 != 0 or year % 400 == 0 else 0

8.)A Linear Time Majority Vote Algorithm ->  http://www.cs.utexas.edu/~moore/best-ideas/mjrty/
the conditions is the element should appear more than len(list)/2

9.) Shifting similar elements at the end of the array(inplace) can be done by updating the current array without 0s (by iterating over it, list comprehensiion)
and then adding that element in the end

10.) DYNAMIC PROGRAMMING Boilerplate

        dp = [0] * (len(nums) + 1)
        dp[0] = 0
        dp[1] = nums[0]

        for i in range(1, len(nums) + 1)
            pass


        retunr dp[len(nums) + 1]

11.) REVERSING something - can be done using 2 pointes at 0 an n-1 and then swapping the elements

12.) Max- Min values in python --  float('inf') # Setting it to max, float(-'inf')

13.) REGEX to remove all special characters -> re.sub('[^A-Za-z0-9]+', '', s), This can also be done by running a loop 
and checking for isalphanum() and creating a new version of the string.

************************************************************************************************************************************************************************
************************************************************************************************************************************************************************
************************************************************************************************************************************************************************

FOR SOLVING PROBLEMS
1.) For array based questions try to
    * find a pattern
    * use maths if possible
    * use hash maps to solve the problems
    * sliding window
    * Use hashsets when dealing with unique values,also we can make user of strings in a hash set
    * sometime you might need to traverse the loop backwards
    * if nothing works then go brute force  ( atleast you will have a solution)


2.) While reading other's code
    * TRY to understand the algorithm and intuition behind using a particular solution

